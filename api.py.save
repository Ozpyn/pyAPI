from flask import jsonify, Flask, request, render_template
# from flask_mysqldb import MySQL
import pymysql

# MySQL configurations
app = Flask(__name__)
app.config['MYSQL_DATABASE_USER'] = 'dbuser'
app.config['MYSQL_PASSWORD'] = 'dbpass'
app.config['MYSQL_DB'] = 'db'
app.config['MYSQL_HOST'] = 'localhost'
# mysql = MySQL(app)

@app.route('/api/getAllVehicles')
def getVehicles():
    connection = None
    try:
        connection = pymysql.connect(
            host=app.config['MYSQL_HOST'],
            user=app.config['MYSQL_DATABASE_USER'],
            password=app.config['MYSQL_PASSWORD'],
            db=app.config['MYSQL_DB'],
            cursorclass=pymysql.cursors.DictCursor
        )
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM vehicle;")
            rows = cursor.fetchall()
            resp = jsonify(rows)
            resp.status_code = 200
            return resp
    except Exception as e:
        print("Error:", e)
        return jsonify({'error': 'Internal Server Error'}), 500
    finally:
        if connection:
            connection.close()

@app.route('/api/getVehicle/<vin>')
def getVehicle(vin):
    connection = None
    try:
        connection = pymysql.connect(
            host=app.config['MYSQL_HOST'],
            user=app.config['MYSQL_DATABASE_USER'],
            password=app.config['MYSQL_PASSWORD'],
            db=app.config['MYSQL_DB'],
            cursorclass=pymysql.cursors.DictCursor
        )
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM vehicle WHERE vin = %s;", (vin,))
            rows = cursor.fetchone()
            if rows:
                resp = jsonify(rows)
                resp.status_code = 200
                return resp
            else:
                return jsonify({'error': 'Vehicle not found'}), 404
    except Exception as e:
        print("Error:", e)
        return jsonify({'error': 'Internal Server Error'}), 500
    finally:
        if connection:
            connection.close()

@app.route('/api/getVehicleFeatures/<vin>')
def getVehicleFeatures(vin):
    connection = None
    try:
        connection = pymysql.connect(
            host=app.config['MYSQL_HOST'],
            user=app.config['MYSQL_DATABASE_USER'],
            password=app.config['MYSQL_PASSWORD'],
            db=app.config['MYSQL_DB'],
            cursorclass=pymysql.cursors.DictCursor
        )
        with connection.cursor() as cursor:
            cursor.execute("SELECT feature FROM 
            vehicle_features WHERE vehicle_vin = %s;", (vin,)) 
            rows = cursor.fetchall() if rows:
                resp = jsonify(rows)
                resp.status_code = 200
                return resp
            else:
                return jsonify({'error': 'Features not found'}), 404
    except Exception as e:
        print("Error:", e)
        return jsonify({'error': 'Internal Server Error'}), 500
    finally:
        if connection:
            connection.close()

@app.route('/api/getVehiclePhotos/<vin>')
def getVehiclePhotos(vin):
    connection = None
    try:
        connection = pymysql.connect(
            host=app.config['MYSQL_HOST'],
            user=app.config['MYSQL_DATABASE_USER'],
            password=app.config['MYSQL_PASSWORD'],
            db=app.config['MYSQL_DB'],
            cursorclass=pymysql.cursors.DictCursor
        )
        with connection.cursor() as cursor:
            cursor.execute("SELECT photo FROM vehicle_photos WHERE vehicle_vin = %s;", (vin,))
            rows = cursor.fetchall()
            if rows:
                resp = jsonify(rows)
                resp.status_code = 200
                return resp
            else:
                return jsonify({'error': 'Features not found'}), 404
    except Exception as e:
        print("Error:", e)
        return jsonify({'error': 'Internal Server Error'}), 500
    finally:
        if connection:
            connection.close()

@app.route('/api/deleteVehicle/<vin>')
def deleteVehicle(vin):
    connection = None
    try:
        connection = pymysql.connect(
            host=app.config['MYSQL_HOST'],
            user=app.config['MYSQL_DATABASE_USER'],
            password=app.config['MYSQL_PASSWORD'],
            db=app.config['MYSQL_DB'],
            cursorclass=pymysql.cursors.DictCursor
        )
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM vehicle WHERE vin = %s;", (vin,))
            rows = cursor.fetchone()
            if rows:
                try:
                    cursor.execute("DELETE FROM vehicle_features WHERE vehicle_vin = %s;", (vin,))
                    cursor.execute("DELETE FROM vehicle_photos WHERE vehicle_vin = %s;", (vin,))
                    cursor.execute("DELETE FROM vehicle WHERE vin = %s;", (vin,))
                    connection.commit()
                    return jsonify({'success': 'Vehicle removed successfully'}), 200
                except Exception as e:
                    print("Error:", e)
                    return jsonify({'error': 'Internal Server Error'}), 500
            else:
                return jsonify({'error': 'Vehicle not found'}), 404
    except Exception as e:
        print("Error:", e)
        return jsonify({'error': 'Internal Server Error'}), 500
    finally:
        if connection:
            connection.close()

@app.route('/api/newVehicle', methods=['POST'])
def createVehicle():
    connection = None
    try:
        data = request.json
        vin = data["vin"]
        year = data["year"]
        color = data["color"]
        mileage = data["mileage"]
        make = data["make"]
        model = data["model"]
        typee = data["type"]
        mpg_city = data["mpg-city"]
        mpg_hwy = data["mpg-hwy"]
        msrp = data["msrp"]
        photos = data.get("photos", [])
        features = data.get("features", [])

        connection = pymysql.connect(
            host=app.config['MYSQL_HOST'],
            user=app.config['MYSQL_DATABASE_USER'],
            password=app.config['MYSQL_PASSWORD'],
            db=app.config['MYSQL_DB'],
            cursorclass=pymysql.cursors.DictCursor
        )
        with connection.cursor() as cursor:
            cursor.execute("INSERT INTO vehicle VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s);", (vin, year, color, mileage, make, model, typee, mpg_city, mpg_hwy, msrp))
            
            for photo in photos:
                cursor.execute("INSERT INTO vehicle_photos (vehicle_vin, photo) VALUES (%s, %s);", (vin, photo))

            for feature in features:
                cursor.execute("INSERT INTO vehicle_features (vehicle_vin, feature) VALUES (%s, %s);", (vin, feature))

        connection.commit()

        return jsonify({'success': 'Vehicle added successfully'}), 200
    except Exception as e:
        print("Error:", e)
        return jsonify({'error': 'Internal Server Error'}), 500
    finally:
        if connection:
            connection.close()

@app.route('/')
def welcome():
    return render_template('index.html'), 200
    # return resp

@app.errorhandler(404)
def not_found(error=None):
    message = {
        'status': 404,
        'message': 'Not Found: ' + request.url,
    }
    resp = jsonify(message)
    resp.status_code = 404

    return resp

if __name__ == "__main__":
    app.run(host='192.168.50.138', port=5004)
